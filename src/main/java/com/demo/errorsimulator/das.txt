
    public static double precisao(double valor, int n, String metodo) {
        if (valor == 0.0) return 0.0;

        int expoente = (int) Math.floor(Math.log10(Math.abs(valor)));
        double mantissa = valor / Math.pow(10, expoente);

        double fator = Math.pow(10, n - 1);

        if (metodo.equalsIgnoreCase("truncamento")) {
            mantissa = Math.floor(mantissa * fator) / fator;
        } else if (metodo.equalsIgnoreCase("arredondamento")) {
            mantissa = Math.round(mantissa * fator) / fator;
        }

        return mantissa * Math.pow(10, expoente);
    }


    // Executa opera√ß√£o aritm√©tica
    public static double operar(double x, double y, String op) {
        return switch (op) {
            case "+" -> x + y;
            case "-" -> x - y;
            case "*" -> x * y;
            case "/" -> x / y;
            default -> throw new IllegalArgumentException("Opera√ß√£o inv√°lida: " + op);
        };
    }

    // Calcula e exibe resultado da opera√ß√£o


    public static void calcular(double a, double b, int n, String metodo, String op){
        double valorExato = operar(a, b, op);
        double x = precisao(a, n, metodo);
        double y = precisao(b, n, metodo);
        double valorAprox = precisao(operar(x, y, op), n, metodo);

        double erroAbs = Math.abs(valorExato - valorAprox);
        double erroRel = Math.abs(erroAbs / (valorExato == 0 ? 1 : valorExato));

        // üîπ M√°scara para n d√≠gitos significativos
        StringBuilder mask = new StringBuilder("0.");
        for (int i = 0; i < n - 1; i++) mask.append("#");
        mask.append("E0");

        DecimalFormat df = new DecimalFormat(mask.toString());

        // üîπ Converte "1.234E-5" ‚Üí "1.234 √ó 10^-5"
        java.util.function.Function<Double, String> formatSci = (num) -> {
            String s = df.format(num);
            if (!s.contains("E")) return s; // caso n√£o tenha nota√ß√£o cient√≠fica
            String[] partes = s.split("E");
            String base = partes[0];
            int exp = Integer.parseInt(partes[1]);
            return base + " √ó 10^" + exp;
        };

        System.out.println("-------------------------------------------------");
        System.out.println("Opera√ß√£o: " + formatSci.apply(x) + " " + op + " " + formatSci.apply(y));
        System.out.println("M√©todo: " + metodo + " | D√≠gitos: " + n);
        System.out.println("Valor Exato: " + formatSci.apply(valorExato));
        System.out.println("Valor Aprox: " + formatSci.apply(valorAprox));
        System.out.println("Erro Absoluto: " + formatSci.apply(erroAbs));
        System.out.println("Erro Relativo: " + formatSci.apply(erroRel));
        System.out.println("-------------------------------------------------");
    }










    // Exemplo 3: propaga√ß√£o de erro em somas sucessivas
    public static void exemplo3() {
        BigDecimal valor = parseNumero("0,56786");
        int n = 4;
        String metodo = "truncamento";
        int repeticoes = 10;

        BigDecimal soma = BigDecimal.ZERO;
        BigDecimal resultadoExato = valor.multiply(new BigDecimal(repeticoes));

        System.out.println("===== Exemplo 3: Propaga√ß√£o de Erros =====");
        for (int i = 1; i <= repeticoes; i++) {
            soma = soma.add(valor);
            soma = ajustarPrecisao(soma, n, metodo);
            System.out.println("Soma " + i + ": " + formatarCientifico(soma, n));
        }

        BigDecimal erroAbs = resultadoExato.subtract(soma).abs();
        BigDecimal erroRel = erroAbs.divide(resultadoExato, new MathContext(n, RoundingMode.HALF_UP));

        System.out.println("--------------------------------------------");
        System.out.println("Valor Exato: " + formatarCientifico(resultadoExato, n));
        System.out.println("Valor Aprox Final: " + formatarCientifico(soma, n));
        System.out.println("Erro Absoluto Total: " + formatarCientifico(erroAbs, n));
        System.out.println("Erro Relativo Total: " + formatarCientifico(erroRel, n));
        System.out.println("--------------------------------------------\n");
    }